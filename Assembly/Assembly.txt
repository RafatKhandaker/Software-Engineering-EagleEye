---------------------ASSEMBLY LANGUAGE------------------

Requirements: Linux or Windows Computer

Boolean Algebra
The Computer
The NASM assembler
Structure of a program
Macros
Boolean Operations
Functions
Aggregates
Floating point numbers
Related Stuff


	| Reasons for Assembly |

perform 8 bit ac register with bit value operation 
add with 37 :  

00100100  00100101

dec: 36 37

hex: 24 25

AND AC,37

^   ^   --> AND and AC are called mnemonics
( it is easier to catch errors in assemblers with words
but for binary operations, the machine code will just 
execute what is written )

mnemonics -> words for bit patterns.

higher level languages : (Cobal and Fortran)

C Language is used for Assembly language. 

Assembly language will make better programmers for C, C++ & Java
(knowing internals of the programming)

__________________Make Better Programmers___________________________

Learn how computers work
Faster and Smaller code
Direct Hardware Access
Learn What Compilers Do

   | Opposite of Portable |

a = b + c;

ADD CX, SI    --> registry named CX & SI
                   pre existing hardware will make no sense 
                   Does not port to another machine.

JAVA is a portable language (JVM) has it's own bytecode.

UNIX, entire operating system was written in Assembly at 
first, then entirelanguage was rewritten in C, except for some 
portions kept within Assembly.


    |ASSEMBLER|

NASM --> Windows & Linux
32 bit model * Code can be written in more than one mode for intel 
processors. However, almost all programs today will run in flat 32 
bit address space

16 bit memory --> bizarre structure 

64 bit system  * special cases --> technique is the same but slightly
different structure.

Technique is the same for alien architectures.. all assembly language 
will be similar.

Step By Step Execution

You store programs into a location and have it do operations you wish.

4 places data can be addressed :  
in Memory , Register (CPU location), 
Immediate (inside of instructions)
   -ex: 
   		somewhere in memory y is created, copy a value of Y into 
   		register two copies exist for y. 

        Add 5 to register

        Copy the register to Y back into memory

   Step By Step Execution 
   
        Copy Data (instructions to copy data)
        Arithmetic (add & or values to shift bits)
        Test bits  (flag bits to test operation)
        Branch  (Storing or return adddress)
        Input & Output  (External interrupts)   

   | Hexadecimal / Octal / Binary |

0  0000  0
1  0001  1       10110110  -> B6
2  0010  2
3  0011  3
4  0100  4
5  0101  5
6  0110  6
7  0111  7
8  1000  8
9  1001  9
10 1010  A
11 1011  B
12 1100  C
13 1101  D
14 1110  E
15 1111  F